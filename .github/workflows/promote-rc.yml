name: Promote RC Image

on:
  workflow_dispatch:
    inputs:
      RELEASE_TAG:
        description: "Release Candidate Tag (e.g., rc1)"
        required: true
env:
  ECR_REGISTRY: "509585101616.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
  ECR_BACKEND: "bookshop-backend"
  ECR_FRONTEND: "bookshop-frontend"
  RC_EC2_IP: "${{ secrets.RC_EC2_IP }}"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  promote-image:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Release Tag from Source Repo
        run: |
          TAG=$(curl -s https://api.github.com/repos/ztao-8/DevOps_bookshop/releases/latest | jq -r .tag_name)
          echo "üîπ Latest release tag: $TAG"
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

      - name: AWS Login
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Set up SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > book-key.pem
          chmod 400 book-key.pem
          
      - name: Use Provided Release Tag
        run: |
          if [[ -z "${{ github.event.inputs.RELEASE_TAG }}" ]]; then
            echo "‚ùå No RELEASE_TAG provided. Exiting..."
            exit 1
          fi
          echo "RELEASE_TAG=${{ github.event.inputs.RELEASE_TAG }}" >> $GITHUB_ENV
          echo "üîπ Using provided release tag: ${{ github.event.inputs.RELEASE_TAG }}"
      
      

      - name: Promote Latest Image to RC Tag
        run: |
          FRONTEND_MANIFEST=$(aws ecr batch-get-image --repository-name $ECR_FRONTEND --image-ids imageTag=latest  --output text --query 'images[].imageManifest')
          if [ -n "$FRONTEND_MANIFEST" ]; then
            aws ecr put-image --repository-name $ECR_FRONTEND --image-tag "$RELEASE_TAG" --image-manifest "$FRONTEND_MANIFEST"
            echo "‚úÖ Promoted frontend image to $RELEASE_TAG"
          else
            echo "‚ùå Failed to get frontend image manifest!"
            exit 1
          fi

          BACKEND_MANIFEST=$(aws ecr batch-get-image --repository-name $ECR_BACKEND --image-ids imageTag=latest --query 'images[].imageManifest' --output text)
          if [ -n "$BACKEND_MANIFEST" ]; then
            aws ecr put-image --repository-name $ECR_BACKEND --image-tag "$RELEASE_TAG" --image-manifest "$BACKEND_MANIFEST"
            echo "‚úÖ Promoted backend image to $RELEASE_TAG"
          else
            echo "‚ùå Failed to get backend image manifest!"
            exit 1
          fi

      - name: Deploy to RC EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i book-key.pem ubuntu@${{ env.RC_EC2_IP }} << EOF
            echo "üöÄ Deploying RC $RELEASE_TAG..."
          
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_DEFAULT_REGION=$AWS_REGION
            export ECR_REGISTRY=$ECR_REGISTRY

            export ECR_BACKEND_IMAGE="$ECR_REGISTRY/$ECR_BACKEND:$RELEASE_TAG"
            export ECR_FRONTEND_IMAGE="$ECR_REGISTRY/$ECR_FRONTEND:$RELEASE_TAG"

            docker-compose -f docker-compose-rc.yml pull
            docker-compose -f docker-compose-rc.yml down
            docker-compose -f docker-compose-rc.yml up -d
          EOF
