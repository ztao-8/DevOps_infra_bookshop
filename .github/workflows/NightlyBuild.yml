name: Nightly Deployment

on:
  schedule:
    - cron: "0 2 * * *"  # 每天凌晨 2 点执行
  workflow_dispatch:  # 允许手动触发

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_BACKEND: "bookshop-backend"
  ECR_FRONTEND: "bookshop-frontend"
  ECR_REGISTRY: "509585101616.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
  QA_EC2_IP: ${{ secrets.QA_EC2_IP}}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ztao-8/DevOps_bookshop
          path: bookshop_source

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build and Push Docker Images using Docker Compose
        run: |
          cd bookshop_source  # ✅ Navigate into the source repository directory
          docker compose build
          TIMESTAMP=$(date "+%Y%m%d.%H%M%S")
          echo "✅ TIMESTAMP: $TIMESTAMP"
          echo "$TIMESTAMP" > TIMESTAMP.txt
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          

          # Backend
          docker tag backend_service:latest $ECR_REGISTRY/$ECR_BACKEND:latest
          docker tag backend_service:latest $ECR_REGISTRY/$ECR_BACKEND:$TIMESTAMP
          docker push $ECR_REGISTRY/$ECR_BACKEND:latest
          docker push $ECR_REGISTRY/$ECR_BACKEND:$TIMESTAMP

          # Frontend
          docker tag frontend_service:latest $ECR_REGISTRY/$ECR_FRONTEND:latest
          docker tag frontend_service:latest $ECR_REGISTRY/$ECR_FRONTEND:$TIMESTAMP
          docker push $ECR_REGISTRY/$ECR_FRONTEND:latest
          docker push $ECR_REGISTRY/$ECR_FRONTEND:$TIMESTAMP

      - name: Upload TIMESTAMP as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ec2-TIMESTAMP
          path: bookshop_source/TIMESTAMP.txt

  setup-test-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Launch Temporary EC2
        run: |
          TEMP_INSTANCE_ID=$(aws ec2 run-instances \
            --region $AWS_REGION \
            --image-id ami-04b4f1a9cf54c11d0 \
            --instance-type t2.micro \
            --key-name book-key \
            --security-group-ids sg-03ca7c5be577e6761 \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "✅ EC2 Instance ID: $TEMP_INSTANCE_ID"
          echo "$TEMP_INSTANCE_ID" > instance_id.txt
          echo "INSTANCE_ID=$TEMP_INSTANCE_ID" >> $GITHUB_ENV  # Store for later steps

          aws ec2 wait instance-running --region $AWS_REGION --instance-ids $TEMP_INSTANCE_ID

          TEMP_IP=$(aws ec2 describe-instances \
            --region $AWS_REGION \
            --instance-ids $TEMP_INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          if [ -z "$TEMP_IP" ]; then
            echo "❌ EC2 failed to start"
            exit 1
          fi
          
          echo "✅ EC2 Public IP: $TEMP_IP"
          echo "$TEMP_IP" > temp_ip.txt

      - name: Save TEMP_IP
        uses: actions/upload-artifact@v4
        with:
          name: ec2-ip
          path: temp_ip.txt

      - name: Upload INSTANCE_ID as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ec2-instance-id
          path: instance_id.txt


  deploy-source-to-ec2:
    needs: setup-test-ec2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Infra Repository
        uses: actions/checkout@v4

      - name: Get TEMP_IP
        uses: actions/download-artifact@v4
        with:
          name: ec2-ip

      - name: Read TEMP_IP
        run: |
          TEMP_IP=$(cat temp_ip.txt)
          echo "✅ TEMP_IP: $TEMP_IP"
          echo "TEMP_IP=$TEMP_IP" >> $GITHUB_ENV

      - name: Set up SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > book-key.pem
          chmod 400 book-key.pem

      - name: Wait for EC2
        run: sleep 240

      - name: Deploy Using Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i book-key.pem ubuntu@${{ env.TEMP_IP }} << EOF
            echo "🔄 Updating system..."
            sudo apt update -y && sudo apt upgrade -y

            echo "🔧 Installing Docker..."
            sudo apt install -y git docker.io docker-compose
            sudo systemctl start docker
            sudo systemctl enable docker
          
            echo "🔧 Installing dependencies..."
            sudo apt install -y unzip curl
      
            echo "🖥️ Installing AWS CLI v2..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            sudo apt install -y unzip  # Ensure unzip is installed
            unzip awscliv2.zip
            sudo ./aws/install
      
            echo "✅ AWS CLI Installed!"
            aws --version
          
            echo "🔑 Configuring AWS Credentials..."
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
            export ECR_REGISTRY=${{ env.ECR_REGISTRY }}

            echo "🐳 Logging in to AWS ECR..."
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            
            echo "📂 Cloning Source Code Repo..."
            git clone https://github.com/ztao-8/DevOps_bookshop.git bookshop_source
            cd bookshop_source || exit 1 

            if [ ! -f docker-compose.yml ]; then
              echo "❌ docker-compose.yml not found! Exiting..."
              exit 1
            fi

            echo "🚀 Running Docker Compose..."
            sudo ECR_BACKEND_IMAGE="$ECR_REGISTRY/bookshop-backend:latest" \
                 ECR_FRONTEND_IMAGE="$ECR_REGISTRY/bookshop-frontend:latest" \
                 docker-compose -f docker-compose-test.yml down  # Stop old containers

            sudo ECR_BACKEND_IMAGE="$ECR_REGISTRY/bookshop-backend:latest" \
                 ECR_FRONTEND_IMAGE="$ECR_REGISTRY/bookshop-frontend:latest" \
                 docker-compose -f docker-compose-test.yml up -d 
          EOF

      - name: Get TIMESTAMP
        uses: actions/download-artifact@v4
        with:
          name: ec2-TIMESTAMP

      - name: Copy Smoke Test Script to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i book-key.pem scripts/smoke-test.sh ubuntu@${{ env.TEMP_IP }}:/home/ubuntu/smoke-test.sh

      - name: Run Smoke Test on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i book-key.pem ubuntu@${{ env.TEMP_IP }} << EOF
            sleep 20
            chmod +x /home/ubuntu/smoke-test.sh
            /home/ubuntu/smoke-test.sh ${{ env.TEMP_IP }}
          EOF

      - name: Deploy to QA EC2
        if: success()
        run: |
          echo "Smoke test succeeded. Deploying latest images to QA..."
          ssh -i book-key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.QA_EC2_IP }} << EOF
            
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
            export ECR_REGISTRY=${{ env.ECR_REGISTRY }}
          
            export ECR_BACKEND_IMAGE="$ECR_REGISTRY/bookshop-backend:latest"
            export ECR_FRONTEND_IMAGE="$ECR_REGISTRY/bookshop-frontend:latest"
          
            export DB_HOST="${{ secrets.RDS_ENDPOINT }}"
            export DB_USER="${{ secrets.RDS_USERNAME }}"
            export DB_PASSWORD="${{ secrets.RDS_PASSWORD }}"
            export DB_NAME="${{ secrets.RDS_DBNAME }}"
          
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REGISTRY
            
            echo "📂 Resetting and Cloning Source Code Repo..."
            if [ -d "bookshop_source" ]; then
              sudo rm -rf bookshop_source
            fi
            git clone https://github.com/ztao-8/DevOps_bookshop.git bookshop_source
            cd bookshop_source || exit 1

            if [ ! -f docker-compose-qa.yml ]; then
              echo "❌ docker-compose-qa.yml not found! Exiting..."
              exit 1
            fi
          
            echo "📝 Replacing Variables in docker-compose-qa.yml Using envsubst..."
            export ECR_BACKEND_IMAGE="$ECR_REGISTRY/bookshop-backend:latest"
            export ECR_FRONTEND_IMAGE="$ECR_REGISTRY/bookshop-frontend:latest"
          
          
            # 🚀 Export Variables to be used in Docker Compose
            echo "✅ Writing environment variables to .env file"
            envsubst < docker-compose-qa.yml > docker-compose-qa.yml.tmp && mv docker-compose-qa.yml.tmp docker-compose-qa.yml
            cat docker-compose-qa.yml 
          
            echo "🚀 Pulling and Deploying Docker Containers..."
            sudo docker-compose -f docker-compose-qa.yml pull
            sudo docker-compose -f docker-compose-qa.yml down
            sudo docker-compose -f docker-compose-qa.yml up -d
            sudo docker image prune -f
          EOF
      - name: Remove Images if Test Fails
        if: failure()
        run: |
          echo "❌ Smoke Test Failed! Removing ECR images..."
          
          TIMESTAMP=$(cat TIMESTAMP.txt)
          echo "✅ TIMESTAMP : $TIMESTAMP "
          echo "TIMESTAMP =$TIMESTAMP" >> $GITHUB_ENV
          if [ -z "TIMESTAMP" ]; then
            echo "❌ ERROR: TIMESTAMP is empty. Exiting..."
            exit 1
          fi
          echo "🔍 DEBUG: TIMESTAMP=$TIMESTAMP"
          aws ecr batch-delete-image --repository-name bookshop-frontend --image-ids imageTag=$TIMESTAMP
          aws ecr batch-delete-image --repository-name bookshop-backend --image-ids imageTag=$TIMESTAMP
          echo "Removing latest tag images..."
          aws ecr batch-delete-image --repository-name bookshop-backend --image-ids imageTag=latest || true
          aws ecr batch-delete-image --repository-name bookshop-frontend --image-ids imageTag=latest || true
          
          FRONTEND_IMAGE_TAG=$(aws ecr list-images --repository-name bookshop-frontend  \
            --query 'imageIds[?imageTag!=`latest`].[imageTag]' --output text | sort -r | sed -n '1p')
          BACKEND_IMAGE_TAG=$(aws ecr list-images --repository-name bookshop-backend \
            --query 'imageIds[?imageTag!=`latest`].[imageTag]' --output text | sort -r | sed -n '1p')
          
          
          if [ -n "$FRONTEND_IMAGE_TAG" ]; then
            echo "Tag last one as latest..."
            FRONTEND_MANIFEST=$(aws ecr batch-get-image --repository-name bookshop-frontend --image-ids imageTag="$FRONTEND_IMAGE_TAG" --output text --query 'images[].imageManifest')
            aws ecr put-image --repository-name bookshop-frontend --image-tag latest --image-manifest "$FRONTEND_MANIFEST"
            echo "✅ Successfully tagged"
          else
            echo "❌ No previous frontend image found. Skipping."
          fi
          
          
          if [ -n "$BACKEND_IMAGE_TAG" ]; then
            echo "Tag last one as latest..."
            BACKEND_MANIFEST=$(aws ecr batch-get-image --repository-name bookshop-backend --image-ids imageTag="$BACKEND_IMAGE_TAG" --output text --query 'images[].imageManifest')
            aws ecr put-image --repository-name bookshop-backend --image-tag latest --image-manifest "$BACKEND_MANIFEST"
            echo "✅ Successfully tagged"         
          else
            echo "❌ No previous backend image."
          fi

          echo "✅ Cleanup completed."


      - name: Get INSTANCE_ID
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: ec2-instance-id

      - name: Read INSTANCE_ID
        if: always()
        run: |
          INSTANCE_ID=$(cat instance_id.txt)
          if [ -z "$INSTANCE_ID" ]; then
            echo "❌ ERROR: INSTANCE_ID is empty. Exiting..."
            exit 1
          fi
          echo "✅ INSTANCE_ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV


      - name: Terminate Temporary EC2 Instance
        if: always()
        run: |
          INSTANCE_ID=${{ env.INSTANCE_ID }}
          if [ -z "$INSTANCE_ID" ]; then
            echo "❌ ERROR: No instance ID found. Skipping termination."
            exit 1
          fi
          echo "🔄 Terminating EC2 instance: $INSTANCE_ID"
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
