name: Nightly Deployment

on:
  schedule:
    - cron: "0 2 * * *"  # 每天凌晨 2 点执行
  workflow_dispatch:  # 允许手动触发

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_BACKEND: "bookshop-backend"
  ECR_FRONTEND: "bookshop-frontend"
  ECR_REGISTRY: "509585101616.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ztao-8/DevOps_bookshop
          path: bookshop_source

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build and Push Docker Images using Docker Compose
        run: |
          cd bookshop_source  # ✅ Navigate into the source repository directory
          docker compose build
          TIMESTAMP=$(date "+%Y%m%d.%H%M%S")
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          # Backend
          docker tag bookshop_source-backend:latest $ECR_REGISTRY/$ECR_BACKEND:latest
          docker tag bookshop_source-backend:latest $ECR_REGISTRY/$ECR_BACKEND:$TIMESTAMP
          docker push $ECR_REGISTRY/$ECR_BACKEND:latest
          docker push $ECR_REGISTRY/$ECR_BACKEND:$TIMESTAMP

          # Frontend
          docker tag bookshop_source-frontend:latest $ECR_REGISTRY/$ECR_FRONTEND:latest
          docker tag bookshop_source-frontend:latest $ECR_REGISTRY/$ECR_FRONTEND:$TIMESTAMP
          docker push $ECR_REGISTRY/$ECR_FRONTEND:latest
          docker push $ECR_REGISTRY/$ECR_FRONTEND:$TIMESTAMP


  setup-test-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Launch Temporary EC2
        run: |
          TEMP_INSTANCE_ID=$(aws ec2 run-instances \
            --region $AWS_REGION \
            --image-id ami-04b4f1a9cf54c11d0 \
            --instance-type t2.micro \
            --key-name book-key \
            --security-group-ids sg-03ca7c5be577e6761 \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "TEMP_INSTANCE_ID=$TEMP_INSTANCE_ID" >> $GITHUB_ENV
          aws ec2 wait instance-running --region $AWS_REGION --instance-ids $TEMP_INSTANCE_ID

          TEMP_IP=$(aws ec2 describe-instances \
            --region $AWS_REGION \
            --instance-ids $TEMP_INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          if [ -z "$TEMP_IP" ]; then
            echo "❌ EC2 failed to start"
            exit 1
          fi
          
          echo "✅ EC2 Public IP: $TEMP_IP"
          echo "$TEMP_IP" > temp_ip.txt

      - name: Save TEMP_IP
        uses: actions/upload-artifact@v4
        with:
          name: ec2-ip
          path: temp_ip.txt

  deploy-source-to-ec2:
    needs: setup-test-ec2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Infra Repository
        uses: actions/checkout@v4

      - name: Get TEMP_IP
        uses: actions/download-artifact@v4
        with:
          name: ec2-ip

      - name: Read TEMP_IP
        run: |
          TEMP_IP=$(cat temp_ip.txt)
          echo "✅ TEMP_IP: $TEMP_IP"
          echo "TEMP_IP=$TEMP_IP" >> $GITHUB_ENV

      - name: Set up SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > book-key.pem
          chmod 400 book-key.pem

      - name: Wait for EC2
        run: sleep 240

      - name: Deploy Using Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i book-key.pem ubuntu@${{ env.TEMP_IP }} << EOF
            echo "🔄 Updating system..."
            sudo apt update -y && sudo apt upgrade -y

            echo "🔧 Installing Docker..."
            sudo apt install -y git docker.io docker-compose
            sudo systemctl start docker
            sudo systemctl enable docker

            echo "🐳 Logging in to AWS ECR..."
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            echo "📂 Cloning Source Code Repo..."
            if [ ! -d "bookshop_source" ]; then
              git clone https://github.com/ztao-8/DevOps_bookshop.git bookshop_source
            else
              cd bookshop_source && git pull && cd ..
            fi

            cd bookshop_source || exit 1  # ✅ Ensure we are in the correct directory

            if [ ! -f docker-compose.yml ]; then
              echo "❌ docker-compose.yml not found! Exiting..."
              exit 1
            fi

            echo "📝 Updating docker-compose.yml..."
            sed -i 's|image: source-code_backend|image: $ECR_REGISTRY/$ECR_BACKEND:latest|' docker-compose.yml
            sed -i 's|image: source-code_frontend|image: $ECR_REGISTRY/$ECR_FRONTEND:latest|' docker-compose.yml

            echo "🚀 Running Docker Compose..."
            sudo docker-compose down  # Stop old containers
            sudo docker-compose up -d  # Start new containers
          EOF

      - name: Copy Smoke Test Script to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i book-key.pem scripts/smoke-test.sh ubuntu@${{ env.TEMP_IP }}:/home/ubuntu/smoke-test.sh

      - name: Run Smoke Test on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i book-key.pem ubuntu@${{ env.TEMP_IP }} << EOF
            sleep 20
            chmod +x /home/ubuntu/smoke-test.sh
            /home/ubuntu/smoke-test.sh localhost
          EOF

      - name: Remove Images if Test Fails
        if: failure()
        run: |
          echo "❌ Smoke Test Failed! Removing ECR images..."
          # Get the timestamped image tag
          TIMESTAMP=$(cat $GITHUB_ENV | grep TIMESTAMP | cut -d '=' -f2)

          # Remove both latest and timestamped backend images
          aws ecr batch-delete-image --repository-name bookshop-backend --image-ids imageTag=latest
          aws ecr batch-delete-image --repository-name bookshop-backend --image-ids imageTag=$TIMESTAMP

          # Remove both latest and timestamped frontend images
          aws ecr batch-delete-image --repository-name bookshop-frontend --image-ids imageTag=latest
          aws ecr batch-delete-image --repository-name bookshop-frontend --image-ids imageTag=$TIMESTAMP

          echo "✅ Cleanup completed: Removed failed images from ECR."
      - name: Terminate Temporary EC2 Instance
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
