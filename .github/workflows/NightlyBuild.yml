name: Nightly Deployment

on:
  schedule:
    - cron: "0 2 * * *"  # 每天凌晨 2 点自动执行
  workflow_dispatch:  # 允许手动触发

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  AWS_REGION: ${{ secrets.AWS_REGION }}


jobs:
  setup-test-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: run temp EC2
        run: |
          TEMP_INSTANCE_ID=$(aws ec2 run-instances \
            --region us-east-1 \
            --image-id ami-04b4f1a9cf54c11d0 \
            --instance-type t2.micro \
            --key-name book-key \
            --security-group-ids sg-03ca7c5be577e6761 \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "TEMP_INSTANCE_ID=$TEMP_INSTANCE_ID" >> $GITHUB_ENV
          aws ec2 wait instance-running --region $AWS_REGION --instance-ids $TEMP_INSTANCE_ID

          TEMP_IP=$(aws ec2 describe-instances \
            --region $AWS_REGION \
            --instance-ids $TEMP_INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          if [ -z "$TEMP_IP" ]; then
            echo "❌ failed"
            exit 1
          fi
          
          echo "✅ EC2 Public IP: $TEMP_IP"
          echo "$TEMP_IP" > temp_ip.txt

      - name: save TEMP_IP to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ec2-ip
          path: temp_ip.txt

  deploy-source-to-ec2:
    needs: setup-test-ec2
    runs-on: ubuntu-latest
    steps:
      - name: get TEMP_IP
        uses: actions/download-artifact@v4
        with:
          name: ec2-ip

      - name: 读取 TEMP_IP
        run: |
          TEMP_IP=$(cat temp_ip.txt)
          echo "✅ get TEMP_IP: $TEMP_IP"
          echo "TEMP_IP=$TEMP_IP" >> $GITHUB_ENV

      - name: set up SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > book-key.pem
          chmod 400 book-key.pem

      - name: wait for EC2
        run: sleep 240

      - name: SSH connect EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i book-key.pem ubuntu@${{ env.TEMP_IP }} << EOF
            echo "update system"
            sudo apt update -y
            sudo apt upgrade -y
      
            echo "install Docker and Git..."
            sudo apt install -y git docker.io docker-compose
      
            echo "start Docker..."
            sudo systemctl start docker
            sudo systemctl enable docker
      
            echo "clone repository..."
            git clone https://github.com/ztao-8/DevOps_bookshop.git source-code
            cd source-code
      
            echo "Docker Compose..."
            sudo docker compose up
          EOF

  smoke-test:
    needs: deploy-source-to-ec2
    runs-on: ubuntu-latest
    steps:
      - name: run Smoke Test
        run: |
          chmod +x scripts/smoke-test.sh
          ./scripts/smoke-test.sh ${{ env.TEMP_IP }}

  build-and-push:
    needs: smoke-test
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
          export AWS_REGION=${{ secrets.AWS_REGION }}

      - name: Login AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin 509585101616.dkr.ecr.$AWS_REGION.amazonaws.com  

      - name: Build & Push Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest ./backend
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest 509585101616.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          docker push 509585101616.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

#  deploy-to-qa:
#    needs: build-and-push
#    runs-on: ubuntu-latest
#    steps:
#      - name: 设置 SSH Key
#        run: |
#          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > my-key.pem
#          chmod 400 my-key.pem
#
#      - name: 部署到 QA 服务器
#        run: |
#          ssh -o StrictHostKeyChecking=no -i my-key.pem ec2-user@${{ secrets.QA_EC2_IP }} << 'EOF'
#            docker pull 509585101616.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
#            docker stop backend_container || true
#            docker rm backend_container || true
#            docker run -d --name backend_container -p 8800:8800 509585101616.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
#          EOF
